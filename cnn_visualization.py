# -*- coding: utf-8 -*-
"""CNN_visualization.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QdTC-QtYz1xAPpg81PY4jrDwrS4vS-Oq
"""

cd /content/drive/MyDrive/Subject/CS331/vgg-visualization

"""#VGG_sec2"""

import numpy as np
import tensorflow.compat.v1 as tf
tf.disable_v2_behavior()

import vgg16
import utils
import cv2

img = utils.load_image("/content/drive/MyDrive/Subject/CS331/vgg-visualization/test_data/tiger.jpeg")

batch = img.reshape((1, 224, 224, 3))

# with tf.Session(config=tf.ConfigProto(gpu_options=(tf.GPUOptions(per_process_gpu_memory_fraction=0.7)))) as sess:
with tf.device('/cpu:0'):
    with tf.Session() as sess:
        images = tf.placeholder("float", [1, 224, 224, 3])
        feed_dict = {images: batch}

        vgg = vgg16.Vgg16()
        with tf.name_scope("content_vgg"):
            vgg.build(images)

        prob = sess.run(vgg.prob, feed_dict=feed_dict)
        print("Top 5 object gan giong voi hinh tiger.jpeg:")
        utils.print_prob(prob[0], '/content/drive/MyDrive/Subject/CS331/vgg-visualization/synset.txt')

"""#VGG_sec3"""

import numpy as np
import tensorflow.compat.v1 as tf
tf.disable_v2_behavior()

import vgg16
import utils
import cv2

img1 = utils.load_image("/content/drive/MyDrive/Subject/CS331/vgg-visualization/test_data/dog-and-cat.jpg")
img2 = utils.load_image("/content/drive/MyDrive/Subject/CS331/vgg-visualization/test_data/elephant-and-dog.jpg")

batch1 = img1.reshape((1, 224, 224, 3))
batch2 = img2.reshape((1, 224, 224, 3))

batch = np.concatenate((batch1, batch2), 0)

# with tf.Session(config=tf.ConfigProto(gpu_options=(tf.GPUOptions(per_process_gpu_memory_fraction=0.7)))) as sess:
with tf.device('/cpu:0'):
    with tf.Session() as sess:
        images = tf.placeholder("float", [2, 224, 224, 3])
        feed_dict = {images: batch}

        vgg = vgg16.Vgg16()
        with tf.name_scope("content_vgg"):
            vgg.build(images)

        prob = sess.run(vgg.prob, feed_dict=feed_dict)
        print("Top 5 object gan giong voi hinh dog-and-cat:")
        utils.print_prob(prob[0], '/content/drive/MyDrive/Subject/CS331/vgg-visualization/synset.txt')
        print("Top 5 object gan giong voi hinh elephant-and-dog:")
        utils.print_prob(prob[1], '/content/drive/MyDrive/Subject/CS331/vgg-visualization/synset.txt')

"""#VGG_sec4"""

import numpy as np
import tensorflow.compat.v1 as tf
tf.disable_v2_behavior()
import vgg16
import utils
import cv2

img1 = utils.load_image("/content/drive/MyDrive/Subject/CS331/vgg-visualization/test_data/tiger.jpeg")
img2 = utils.load_image("/content/drive/MyDrive/Subject/CS331/vgg-visualization/test_data/tiger_crop_unimportant.jpg")
img3 = utils.load_image("/content/drive/MyDrive/Subject/CS331/vgg-visualization/test_data/tiger_crop_important.jpg")

batch1 = img1.reshape((1, 224, 224, 3))
batch2 = img2.reshape((1, 224, 224, 3))
batch3 = img3.reshape((1, 224, 224, 3))

batch = np.concatenate((batch1, batch2, batch3), 0)

# with tf.Session(config=tf.ConfigProto(gpu_options=(tf.GPUOptions(per_process_gpu_memory_fraction=0.7)))) as sess:
with tf.device('/cpu:0'):
    with tf.Session() as sess:
        images = tf.placeholder("float", [3, 224, 224, 3])
        feed_dict = {images: batch}

        vgg = vgg16.Vgg16()
        with tf.name_scope("content_vgg"):
            vgg.build(images)

        prob = sess.run(vgg.prob, feed_dict=feed_dict)
        print("Top 5 object gan giong voi hinh tiger:")
        utils.print_prob(prob[0], '/content/drive/MyDrive/Subject/CS331/vgg-visualization/synset.txt')
        print("Top 5 object gan giong voi hinh tiger_crop_unimportant:")
        utils.print_prob(prob[1], '/content/drive/MyDrive/Subject/CS331/vgg-visualization/synset.txt')
        print("Top 5 object gan giong voi hinh tiger_crop_important:")
        utils.print_prob(prob[2], '/content/drive/MyDrive/Subject/CS331/vgg-visualization/synset.txt')

"""#VGG_sec5"""

import numpy as np
import tensorflow.compat.v1 as tf
tf.disable_v2_behavior()
from google.colab.patches import cv2_imshow
import matplotlib.pyplot as plt

import vgg16
import utils
import cv2

img = utils.load_image("/content/drive/MyDrive/Subject/CS331/vgg-visualization/test_data/tiger.jpeg")

batch = img.reshape((1, 224, 224, 3))

# with tf.Session(config=tf.ConfigProto(gpu_options=(tf.GPUOptions(per_process_gpu_memory_fraction=0.7)))) as sess:
with tf.device('/cpu:0'):
    with tf.Session() as sess:
        images = tf.placeholder("float", [1, 224, 224, 3])
        feed_dict = {images: batch}

        vgg = vgg16.Vgg16()
        with tf.name_scope("content_vgg"):
            vgg.build(images)
        
        # prob, conv1_1 = sess.run([vgg.prob, vgg.conv1_1], feed_dict=feed_dict)
        prob, conv1_2 = sess.run([vgg.prob, vgg.conv1_2], feed_dict=feed_dict)

        # prob, conv2_1 = sess.run([vgg.prob, vgg.conv2_1], feed_dict=feed_dict)
        prob, conv2_2 = sess.run([vgg.prob, vgg.conv2_2], feed_dict=feed_dict)

        # prob, conv3_1 = sess.run([vgg.prob, vgg.conv3_1], feed_dict=feed_dict)
        prob, conv3_2 = sess.run([vgg.prob, vgg.conv3_2], feed_dict=feed_dict)
        # prob, conv3_3 = sess.run([vgg.prob, vgg.conv3_3], feed_dict=feed_dict)
        
        # prob, conv4_1 = sess.run([vgg.prob, vgg.conv4_1], feed_dict=feed_dict)
        prob, conv4_2 = sess.run([vgg.prob, vgg.conv4_2], feed_dict=feed_dict)
        # prob, conv4_3 = sess.run([vgg.prob, vgg.conv4_3], feed_dict=feed_dict)

        # prob, conv5_1 = sess.run([vgg.prob, vgg.conv5_1], feed_dict=feed_dict)
        prob, conv5_2 = sess.run([vgg.prob, vgg.conv5_2], feed_dict=feed_dict)
        # prob, conv5_3 = sess.run([vgg.prob, vgg.conv5_3], feed_dict=feed_dict)
        
        # conv = [(conv1_1,'conv1_1'), (conv2_1,'conv2_1'), (conv3_1,'conv3_1'), (conv3_3,'conv3_3'), (conv4_1,'conv4_1'), (conv4_3,'conv4_3'), (conv5_1,'conv5_1'), (conv5_3,'conv5_3')]
        conv = [(conv1_2,'conv1_2'), (conv2_2,'conv2_2'), (conv3_2,'conv3_2'), (conv4_2,'conv4_2'), (conv5_2,'conv5_2')]
        
        for (_conv, name) in conv:
          fig, axs = plt.subplots(1, 3)
          for ax, j in zip(axs, [1,2,3]):
            ax.imshow(_conv[0,:,:,j])
            ax.set_title('Feature_'+ str(j))
            # ax.axis('off')
          print('Some feature maps in ' + name)

          plt.savefig('/content/drive/MyDrive/Subject/CS331/' + name + '.jpg')
          plt.show()